# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2018-03-06 09:08
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='email address')),
                ('password', models.CharField(help_text="<a class='btn-link' href='password'>重置密码</a>", max_length=128, verbose_name='password')),
                ('name', models.CharField(max_length=32)),
                ('memo', models.TextField(blank=True, default=None, null=True, verbose_name='备注')),
                ('date_joined', models.DateTimeField(auto_now_add=True, null=True)),
                ('valid_begin_time', models.DateTimeField(default=django.utils.timezone.now, help_text='yyyy-mm-dd HH:MM:SS')),
                ('valid_end_time', models.DateTimeField(blank=True, help_text='yyyy-mm-dd HH:MM:SS', null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
            ],
            options={
                'permissions': (('web_access_dashboard', '可以访问 审计主页'), ('web_batch_cmd_exec', '可以访问 批量命令执行页面'), ('web_batch_batch_file_transfer', '可以访问 批量文件分发页面'), ('web_config_center', '可以访问 堡垒机配置中心'), ('web_config_items', '可以访问 堡垒机各配置列表'), ('web_invoke_admin_action', '可以进行admin action执行动作'), ('web_table_change_page', '可以访问 堡垒机各配置项修改页'), ('web_table_change', '可以修改 堡垒机各配置项')),
                'verbose_name': '用户账户信息',
                'verbose_name_plural': '用户账户信息',
            },
        ),
        migrations.CreateModel(
            name='BindHostGroups',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
                ('memo', models.CharField(blank=True, max_length=128, null=True)),
            ],
            options={
                'verbose_name': '主机组',
                'verbose_name_plural': '主机组',
            },
        ),
        migrations.CreateModel(
            name='BindHosts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enabled', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': '主机与远程用户绑定',
                'verbose_name_plural': '主机远程与用户绑定',
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
            ],
            options={
                'verbose_name': '部门',
                'verbose_name_plural': '部门',
            },
        ),
        migrations.CreateModel(
            name='Hosts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hostname', models.CharField(max_length=64, unique=True)),
                ('ip_addr', models.GenericIPAddressField(unique=True)),
                ('system_type', models.CharField(choices=[('windows', 'Windows'), ('linux', 'Linux/Unix')], default='linux', max_length=32)),
                ('port', models.IntegerField(default=22)),
                ('enabled', models.BooleanField(default=True, help_text='主机若不想被用户访问可以去掉此选项')),
                ('memo', models.CharField(blank=True, max_length=128, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': '主机',
                'verbose_name_plural': '主机',
            },
        ),
        migrations.CreateModel(
            name='HostUsers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('auth_method', models.CharField(choices=[('ssh-password', 'SSH/ Password'), ('ssh-key', 'SSH/KEY')], help_text='如果选择SSH/KEY，请确保你的私钥文件已在settings.py中指定', max_length=16)),
                ('username', models.CharField(max_length=32)),
                ('password', models.CharField(blank=True, help_text='如果auth_method选择的是SSH/KEY,那此处不需要填写..', max_length=64, null=True)),
                ('memo', models.CharField(blank=True, max_length=128, null=True)),
            ],
            options={
                'verbose_name': '远程主机用户',
                'verbose_name_plural': '远程主机用户',
            },
        ),
        migrations.CreateModel(
            name='IDC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
            ],
            options={
                'verbose_name': 'IDC',
                'verbose_name_plural': 'IDC',
            },
        ),
        migrations.AlterUniqueTogether(
            name='hostusers',
            unique_together=set([('auth_method', 'password', 'username')]),
        ),
        migrations.AddField(
            model_name='hosts',
            name='idc',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.IDC'),
        ),
        migrations.AddField(
            model_name='bindhosts',
            name='host',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.Hosts'),
        ),
        migrations.AddField(
            model_name='bindhosts',
            name='host_user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='web.HostUsers', verbose_name='远程用户'),
        ),
        migrations.AddField(
            model_name='bindhostgroups',
            name='bind_hosts',
            field=models.ManyToManyField(blank=True, to='web.BindHosts'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='bind_hosts',
            field=models.ManyToManyField(blank=True, to='web.BindHosts', verbose_name='授权主机'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='bind_hosts_groups',
            field=models.ManyToManyField(blank=True, to='web.BindHostGroups', verbose_name='授权主机组'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='department',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='web.Department', verbose_name='部门'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='bindhosts',
            unique_together=set([('host', 'host_user')]),
        ),
    ]
